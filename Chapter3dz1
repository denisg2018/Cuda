//подключение библиотек
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include <stdlib.h>
#include<curand.h>
#include<curand_kernel.h>
#define N 1000

// ядро
__global__ void DzetaFunction(double* a, double* b)
{
	int i = threadIdx.x;
	a[i] = 1.0 / powf(float(i + 1), *b);
}
//главная функция
int main()
{

	// переменные на CPU
	double a[N], b, sum;

	// переменные на GPU
	double* dev_a, * dev_b;
	//размерность
	int sizeA = N * sizeof(double);
	int sizeB = sizeof(double);
	// выделяем память на GPU
	cudaMalloc((void**)&dev_a, sizeA);
	cudaMalloc((void**)&dev_b, sizeB);

	// инициализация переменных
	b = 2;
	sum = 0;

	// копирование информации с CPU на GPU
	cudaMemcpy(dev_a, &a, sizeA, cudaMemcpyHostToDevice);
	cudaMemcpy(dev_b, &b, sizeB, cudaMemcpyHostToDevice);


	// вызов ядра
	DzetaFunction << < 1, N >> > (dev_a, dev_b);

	// копирование результата работы ядра с GPU на CPU
	cudaMemcpy(&a, dev_a, sizeA, cudaMemcpyDeviceToHost);

	for (int i = 0; i < N; ++i)
	{
		sum += a[i];
	}

	// вывод информации
	printf("%f\n", sum);
	// очищение памяти на GPU
	cudaFree(dev_a);
	cudaFree(dev_b);


	return 0;
}
