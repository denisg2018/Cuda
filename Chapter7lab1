#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include "cmath"
#include <stdio.h>

#define N 16 //количество элементов массива
#define BASE_TYPE int
#define BLOCK_SIZE 32

// Ядро
__global__ void scalMult(const BASE_TYPE* A, const BASE_TYPE* B, BASE_TYPE* C)
{
	// Переменная для хранения суммы элементов
	BASE_TYPE sum = 0.0;
	// Создание массивов в разделяемой памяти
	__shared__ BASE_TYPE ash[BLOCK_SIZE];
	__shared__ BASE_TYPE bsh[BLOCK_SIZE];
	// Копирование из глобальной памяти
	ash[threadIdx.x] = A[blockIdx.x * blockDim.x + threadIdx.x];
	bsh[threadIdx.x] = B[blockIdx.x * blockDim.x + threadIdx.x];
	// Синхронизация нитей
	__syncthreads();
	// Вычисление скалярного произведения
	if (threadIdx.x == 0)
	{
		sum = 0.0;
		for (int j = 0; j < BLOCK_SIZE; j++)
			sum += ash[j] * bsh[j];
		C[blockIdx.x] = sum;
	}
}

int main()
{
	// переменные на CPU
	BASE_TYPE a[N], b[N], c[N];
	// переменные на GPU
	BASE_TYPE* dev_a, * dev_b, * dev_c;

	// заполнение массивов
	for (int i = 0; i < N; i++)
	{
		a[i] = i;
		b[i] = N - 1;
	}

	int size = N * sizeof(BASE_TYPE);

		// выделяем память на GPU
	cudaMalloc((void**)&dev_a, size);
	cudaMalloc((void**)&dev_b, size);
	cudaMalloc((void**)&dev_c, size);

	// копирование информации с CPU на GPU
	cudaMemcpy(dev_a, a, size, cudaMemcpyHostToDevice);
	cudaMemcpy(dev_b, b, size, cudaMemcpyHostToDevice);

	int GRID_SIZE = N / BLOCK_SIZE + 1;

	// инициализируем события
	cudaEvent_t start, stop;
	// создаем события
	cudaEventCreate(&start);
	cudaEventCreate(&stop);
	// старт времени работы ядра
	cudaEventRecord(start, 0);

	//вызов ядра
	scalMult << <GRID_SIZE, BLOCK_SIZE >> > (dev_a, dev_b, dev_c);

	// стоп времени работы ядра
	cudaEventRecord(stop, 0);
	cudaEventSynchronize(stop);
	// вычисление времени работы
	float KernelTime;
	cudaEventElapsedTime(&KernelTime, start, stop);
	printf("time = %f\n", KernelTime);
	// копирование результата работы ядра с GPU на CPU
	cudaMemcpy(c, dev_c, size, cudaMemcpyDeviceToHost);

	//вывод результата
	int scalMult = 0;
	for (int i = 0; i < GRID_SIZE; i++)
		scalMult += c[i];
	printf("scalMult = %d", scalMult);
	// очищение памяти на GPU
	cudaFree(dev_a);
	cudaFree(dev_b);
	cudaFree(dev_c);
	return 0;
}
